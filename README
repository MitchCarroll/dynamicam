Dynamicam is a program (and the resulting output) that dynamically creates a digital 
camoflage pattern based on a fractal process. 

Currently, the user defines the desired size, 
number of colors, the hexidecimal value for the desired colors, and the 
number of 'layers' the dimensions of each layer in the pattern, and a random 'seed'.
The end result is a customized camoflage pattern that is composed of blocks of
color, each of which is composed of smaller blocks of color, and so forth.
The color transitions smoothly from block to block, and the resulting pattern
is tilable (as long as the layers are all powers of 2 in dimension).

A goal of this project is to develop an automated process for analysing the colors, 
and spatial frequencies of a set of photos, and determining the optimal input parameters for
the generation algorithm, as well as to develop better fractal algorithms to give better 
concealment than a simple 'soft noise' algorithm, although the current algorithm seems to perform 
adequately, provided the user takes the time to derive the proper inputs manually.

Some sample input files and their corresponding outputs are given.

NOTES:
Fourier transform creates a magnitude and a phase output. reconstruction from only the magnitude image creates an
image with the same spatial frequencies, but distributed evenly, ending up in a corrupted image. This may be a valid way
to create the noise patterns for this program, especially if the fourier transforms are restricted to certain groups of
colors. Filtering may be a way to simplify the colors, and combining transforms of multiple input images may be the
solution to getting a more generalized pattern for multiple environments or conditions.

TODO:
Add better command line parsing
Add better color gradient generation
    Color output should be a gradient of colors including solids, and dithers
Add better image outputs (e.g.: JPG, PNG, etc.)
Incorporate default power-of-two layers implicitly.
Add some image analysis tools to extract an optimal color pallet and spatial frequencies per color (probably Fourier Transform).
Use a better type of fractal that incorporates given spatial frequencies.
Better input file format with comment rejection, and tagged data fields. Probably a version number too.
